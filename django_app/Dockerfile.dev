###########
# Builder #
###########

# pull official base image
FROM python:3.9.6-alpine as builder

# set work directory
WORKDIR /usr/src/django_app

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev

# use lint tool "flake8" for analysis (can be removed)
RUN pip install --upgrade pip
RUN pip install flake8==3.9.2
COPY . .
#RUN flake8 --ignore=E501,F401 .

# install dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/django_app/wheels -r requirements.txt

#########
# FINAL #
#########

# pull official base image
FROM python:3.9.6-alpine

# Docker runs container processes as root inside of a container. 
# This is a bad practice since attackers can gain root access to 
# the Docker host if they manage to break out of the container. 
# If you're root in the container, you'll be root on the host.

# create directory for the app user
RUN mkdir -p /home/django_app

# create the user
RUN addgroup -S django_app && adduser -S django_app -G django_app

# create the appropriate directories
ENV HOME=/home/django_app
ENV APP_HOME=/home/django_app/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# install dependencies
RUN apk update && apk add libpq
COPY --from=builder /usr/src/django_app/wheels /wheels
COPY --from=builder /usr/src/django_app/requirements.txt .
RUN pip install --no-cache /wheels/*

# copy entrypoint.prod.sh
COPY ./entrypoint.dev.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.dev.sh
RUN chmod +x  $APP_HOME/entrypoint.dev.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R django_app:django_app $APP_HOME

# change to the app user
USER django_app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/django_app/web/entrypoint.dev.sh"]